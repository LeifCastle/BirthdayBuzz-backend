#! /app/.heroku/node/bin/node

const moment = require("moment-timezone");
const dotenv = require("dotenv");
dotenv.config({ path: "../.env" });
const { User } = require("../models");
const { CourierClient } = require("@trycourier/courier");
const courier = CourierClient({
  authorizationToken: process.env.COURIER_API_KEY,
});

function getUsers() {
  const currentDate = new Date();
  const timestamp = currentDate.toUTCString();
  let today = moment.tz(timestamp, "UTC").format("M/DD");
  console.log("Today's Date: ", today);
  User.find()
    .then((allUsers) => {
      allUsers.forEach((user) => {
        console.log(
          `${user.firstName} ${user.lastName} local timezone is ${user.timezone} requested Buzz Time is ${user.buzzTime}`
        );
        user.buzzList.forEach((entry) => {
          let endSlice = entry.birthday.slice(0, -5);
          let beginSlice = endSlice.slice(1);
          console.log(`${entry.name}'s birthday is on ${beginSlice}`);
          if (beginSlice === today) {
            console.log(`--Birthday Match`);
            console.log(
              `Send reminder at ${user.buzzTime[0]}:${user.buzzTime[1]} ${user.buzzTime[2]} ${user.timezone}`
            );

            //Hour to send email at
            let sendHour = user.buzzTime[0];
            let minutes = user.buzzTime[1];
            if (sendHour === "12" && user.buzzTime[2] === "AM") {
              sendHour = "0";
            }
            if (user.buzzTime[2] === "PM" && sendHour !== "12") {
              sendHour = `${parseInt(sendHour) + 12}`;
            }
            let userTime = `${sendHour}:${minutes}`;
            console.log("Formated Time Request: ", userTime);

            //Timezone
            let userTimezone = user.timezone;
            let timezoneH = {
              UTC: moment.tz(timestamp, "UTC").format("H"),
              EST: moment.tz(timestamp, "America/New_York").format("H"),
              CST: moment.tz(timestamp, "America/Chicago").format("H"),
              MST: moment.tz(timestamp, "America/Denver").format("H"),
              PST: moment.tz(timestamp, "America/Los_Angeles").format("H"),
            };
            let timezoneM = {
              UTC: moment.tz(timestamp, "UTC").format("m"),
              EST: moment.tz(timestamp, "America/New_York").format("m"),
              CST: moment.tz(timestamp, "America/Chicago").format("m"),
              MST: moment.tz(timestamp, "America/Denver").format("m"),
              PST: moment.tz(timestamp, "America/Los_Angeles").format("m"),
            };

            //Timezone defined hour to send email at
            let currentHour = timezoneH[userTimezone];
            let currentMinute = timezoneM[userTimezone];
            let delay = sendHour - currentHour;
            let msDelay =
              delay * 3600000 + minutes * 60000 - currentMinute * 60000;
            console.log("Delay (ms):", msDelay);
            if (msDelay > 0) {
              sendScheduledEmail(
                user.email,
                user.firstName,
                entry.message,
                msDelay
              );
            }
          }
        });
      });
    })
    .catch((error) => {
      console.log("Error finding all users: ", error);
    });
}
//parseInt(unixTimestamp)
async function sendScheduledEmail(address, name, message, delay) {
  const response = await courier.send({
    message: {
      to: {
        email: address,
      },
      content: {
        title: "Birthday Reminder!",
        body: message,
      },
      data: {
        name: name,
      },
      routing: {
        method: "single",
        channels: ["email"],
      },
      delay: { duration: delay },
    },
  });
  console.log("Response: ", response);
  if (response.requestId) {
    console.log("Email scheduled successfully!");
  } else {
    console.log("Error: ", response);
  }
}

getUsers();
